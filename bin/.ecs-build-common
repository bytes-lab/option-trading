#!/usr/bin/env bash

# Bash escape sequences for changing the color of printed text.
export START_YELLOW_TEXT='\033[0;33m'
export START_RED_TEXT='\033[0;31m'
export CLEAR_TEXT_COLOR='\033[0m'

if [[ -z "$BUILD_SCRIPT_NAME" ]] ; then
  echo -e "${START_RED_TEXT}ERROR: THIS SCRIPT CAN NOT BE DIRECTLY EXECUTED.${CLEAR_TEXT_COLOR}" 1>&2
  exit 2
fi

export ECR_IMAGE_LOCATION='813539762970.dkr.ecr.us-east-2.amazonaws.com'
export MAIN_BRANCH_NAME='main'

ts_aws() {
  aws --profile tigerstance "$@"
}

build_and_tag_image() {
  build_image "$@"
  if [[ ${#IMAGE_TAGS[@]} -gt 0 ]] ; then
    tag_last_built_image_id
  fi
}

build_image() {
  local TMP_IMAGE_ID_FILE
  TMP_IMAGE_ID_FILE="$( mktemp )"
  docker build "$@" --progress plain --iidfile "$TMP_IMAGE_ID_FILE" --file "$DOCKER_FILE_PATH" "$CONTAINER_APP_DIR" || \
    { echo -e "${START_RED_TEXT}Docker image build failed.${COMMAND_LINE_ERROR}${CLEAR_TEXT_COLOR}" 1>&2 ; exit 1 ; }
  IMAGE_ID="$(cat "$TMP_IMAGE_ID_FILE")"
}

tag_last_built_image_id() {
  for IMAGE_TAG in "${IMAGE_TAGS[@]}" ; do
    docker tag "$IMAGE_ID" "${ECR_IMAGE_REPOSITORY}:${IMAGE_TAG}"
  done
}

parse_command_line() {
  local PRINT_HELP

  PRINT_HELP=N
  USE_LATEST_TAG=N
  USE_GIT_COMMIT_HASH_TAG=N
  IGNORE_BRANCH_CHECK=N
  IGNORE_UNCOMMITTED_FILES=N
  PUSH_IMAGES=N
  ADDITIONAL_TAGS=( )
  IMAGE_TAGS=

  COMMAND_LINE_WARNINGS=( )
  COMMAND_LINE_ERRORS=( )
  UNKNOWN_OPTIONS=( )

  while [[ "$1" != '' ]] ; do
    case "$1" in
      -h | --help )
        PRINT_HELP=Y
        ;;

      --ignore-branch-check )
        IGNORE_BRANCH_CHECK=Y
        ;;

      --ignore-uncommitted-files )
        IGNORE_UNCOMMITTED_FILES=Y
        ;;

      --use-latest-tag )
        USE_LATEST_TAG=Y
        ;;

      --use-git-commit-hash-tag )
        USE_GIT_COMMIT_HASH_TAG=Y
        ;;

      --tags )
        shift
        ADDITIONAL_TAGS=( $(echo "$1" | sed -E 's/[[:space:]]*,[[:space:]]*/ /g' ) )
        ;;

      --push )
        PUSH_IMAGES=Y
        ;;

      * )
        UNKNOWN_OPTIONS=( "${UNKNOWN_OPTIONS[@]}" "$1" )
        ;;
    esac

    shift
  done

  if [[ "$PRINT_HELP" = 'Y' ]] ; then
    cat > /dev/stderr << EOF

  Usage: $BUILD_SCRIPT_NAME [OPTIONS]

    Builds the $IMAGE_LABEL Docker image.

  Options:
    -h, --help                       Display this message
        --ignore-branch-check        Ignore the fact that the current git branch is not '$MAIN_BRANCH_NAME' (USE WITH CAUTION!)
        --ignore-uncommitted-files   Ignore the fact that the current git status is uncommitted file (USE WITH CAUTION!)
        --use-latest-tag             Tag this image as the 'latest' image
        --use-git-commit-hash-tag    Use the git commit hash as a tag for this image build
        --tags TAG[,TAG,...]         Provides a comma-delimited list of tags to apply to the built image
        --push                       Push the built image(s) to the remote repository

EOF
     exit 0
  fi

  check_build_start_state
}

check_build_start_state() {
  local TAGS_OPTIONS_MSG
  local UNKNOWN_OPTIONS_LIST
  local GIT_COMMIT_HASH

  perform_branch_check
  perform_uncommitted_files_check

  if [[ ${#UNKNOWN_OPTIONS[@]} -gt 0 ]] ; then
    UNKNOWN_OPTIONS_LIST="$(join_array ', ' "${UNKNOWN_OPTIONS[@]}")"
    COMMAND_LINE_ERRORS=( "${COMMAND_LINE_ERRORS[@]}" "Unsupported option(s) provided: ${UNKNOWN_OPTIONS_LIST}" )
  fi

  IMAGE_TAGS=( "${ADDITIONAL_TAGS[@]}" )
  GIT_COMMIT_HASH="$(get_current_git_commit_hash)"

  if [[ "$USE_GIT_COMMIT_HASH_TAG" = 'Y' ]] ; then
    IMAGE_TAGS=( "$GIT_COMMIT_HASH" "${IMAGE_TAGS[@]}" )
  fi

  if [[ "$USE_LATEST_TAG" = 'Y' ]] ; then
    IMAGE_TAGS=( 'latest' "${IMAGE_TAGS[@]}" )
  fi

  if [[ ${#IMAGE_TAGS[@]} -eq 0 ]] ; then
    TAGS_OPTIONS_MSG="use the option(s) --use-latest-tag, --use-git-commit-hash-tag, and/or --tags to specify tags"
    if [[ "$PUSH_IMAGES" = 'Y' ]] ; then
      COMMAND_LINE_ERRORS=( "${COMMAND_LINE_ERRORS[@]}" "No tags have been requested or provided for this image build... unable to push untagged images... $TAGS_OPTIONS_MSG")
    else
      COMMAND_LINE_WARNINGS=( "${COMMAND_LINE_WARNINGS[@]}" "No tags have been requested or provided for this image build... $TAGS_OPTIONS_MSG" )
    fi
  fi

  if [[ ${#COMMAND_LINE_WARNINGS[@]} -gt 0 ]] ; then
    for COMMAND_LINE_WARNING in "${COMMAND_LINE_WARNINGS[@]}" ; do
      echo -e "${START_YELLOW_TEXT}WARNING: ${COMMAND_LINE_WARNING}${CLEAR_TEXT_COLOR}" 1>&2
    done
  fi

  if [[ ${#COMMAND_LINE_ERRORS[@]} -gt 0 ]] ; then
    for COMMAND_LINE_ERROR in "${COMMAND_LINE_ERRORS[@]}" ; do
      echo -e "${START_RED_TEXT}ERROR: ${COMMAND_LINE_ERROR}${CLEAR_TEXT_COLOR}" 1>&2
    done
    exit 1
  fi
}

get_current_branch() {
  git branch --show-current
}

on_main_branch() {
  [[ "$(get_current_branch)" = "$MAIN_BRANCH_NAME" ]]
  return $?
}

has_uncommitted_files() {
  [[ "$(git status -s)" != '' ]]
  return $?
}

perform_branch_check() {
  if ! on_main_branch ; then
    if [[ "$IGNORE_BRANCH_CHECK" = 'Y' ]] ; then
      COMMAND_LINE_WARNINGS=( "${COMMAND_LINE_WARNINGS[@]}" \
        "Ignoring branch check (currently on branch '$(get_current_branch)')" \
      )
    else
      COMMAND_LINE_ERRORS=( "${COMMAND_LINE_ERRORS[@]}" \
        "Not on the main branch (currently on branch '$(get_current_branch)' instead of branch '$MAIN_BRANCH_NAME'), unable to build image (use '--ignore-branch-check' to skip this check)" \
      )
    fi
  fi
}

perform_uncommitted_files_check() {
  if has_uncommitted_files ; then
    if [[ "$IGNORE_UNCOMMITTED_FILES" = 'Y' ]] ; then
      COMMAND_LINE_WARNINGS=( "${COMMAND_LINE_WARNINGS[@]}" \
        "Building with uncommitted files" \
      )
    else
      COMMAND_LINE_ERRORS=( "${COMMAND_LINE_ERRORS[@]}" \
        "Uncommitted files detected, unable to build image (use '--ignore-uncommitted-files' to skip this check)" \
      )
    fi
  fi
}

get_current_git_commit_hash() {
  git rev-parse --short HEAD
}

aws_ecs_docker_login() {
  echo '========================================'
  echo 'Logging into AWS ECR'
  echo '========================================'
  echo

  ts_aws ecr get-login-password --region us-east-2 \
    | docker login --username AWS --password-stdin 813539762970.dkr.ecr.us-east-2.amazonaws.com
}

get_images() {
  local IMAGE_TAG
  local ECR_IMAGE_REPOSITORY

  IMAGES=( )

  if [[ ${#IMAGE_TAGS[@]} -gt 0 ]] ; then
    ECR_IMAGE_REPOSITORIES=( $(echo "${ECR_IMAGE_REPOSITORIES[@]}" | sort -u) )
    IMAGE_TAGS=( $(echo "${IMAGE_TAGS[@]}" | sort -u) )

    for ECR_IMAGE_REPOSITORY in "${ECR_IMAGE_REPOSITORIES[@]}"; do
      if [[ ${#IMAGE_TAGS[@]} -ge 1 ]] ; then
        for IMAGE_TAG in "${IMAGE_TAGS[@]}" ; do
          IMAGES=( "${IMAGES[@]}" "${ECR_IMAGE_REPOSITORY}:${IMAGE_TAG}" )
        done
      else
          IMAGES=( "${IMAGES[@]}" "${ECR_IMAGE_REPOSITORY}" )
      fi
    done
  fi
}

print_building_images_message() {
  print_images_message "Building"
}

print_built_images_message() {
  print_images_message "Built"
}

print_images_message() {
  local IMAGE

  get_images

  echo
  echo '========================================'

  if [[ ${#IMAGES[@]} -gt 0 ]] ; then
    echo "$1 the image(s)..."

    for IMAGE in "${IMAGES[@]}" ; do
      echo "    ${IMAGE}"
    done
  else
    echo "Building the image..."
  fi

  echo '========================================'
  echo
}

push_images_if_requested() {
  local IMAGE

  if [[ "$PUSH_IMAGES" = 'Y' ]] ; then
    get_images
    aws_ecs_docker_login
    push_images_to_ecr

    echo '========================================'
    echo "Built and pushed the following image(s)..."

    for IMAGE in "${IMAGES[@]}" ; do
      echo "    ${IMAGE}"
    done

    echo '========================================'
    echo
  fi
}

push_images_to_ecr() {
  local IMAGE

  get_images

  echo
  echo '========================================'
  echo 'Pushing image(s) to AWS ECR...'
  echo '========================================'
  echo

  for IMAGE in "${IMAGES[@]}" ; do
    docker push "${IMAGE}"
    echo
  done
}

join_array() {
  local DELIMITER="$1"
  shift

  local FIRST_ELEMENT="$1"
  shift

  # The '${@/#/$DELIMITER}' syntax requires some explanation. It is Bash array syntax for listing the elements
  # of an array while performing substitutions on the elements. The format '${@}' would simply list out the
  # parameters passed to this function. The additional '/#/$DELIMITER' states replace the beginning of each
  # entry (the '/#' section) with the provided string (the '/#$DELIMITER section).
  printf '%s' "$FIRST_ELEMENT" "${@/#/$DELIMITER}"
}
